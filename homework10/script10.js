 //91. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç (–∫—É—Ä—Å –∑–∞–¥–∞—î—à —Å–∞–º).
 
 function convert() {
      const rate = parseFloat(document.getElementById("rateInput").value);
      const usd = parseFloat(document.getElementById("usdInput").value);
      const answerDiv = document.getElementById("answer");

      if (isNaN(rate) || rate <= 0) {
        answerDiv.textContent = "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫—É—Ä—Å!";
        return;
      }

      if (isNaN(usd) || usd < 0) {
        answerDiv.textContent = "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É!";
        return;
      }

      const uah = usd * rate;
      answerDiv.textContent = `${usd} $ = ${uah.toFixed(2)} –≥—Ä–Ω`;
    }

//92. –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ (C ‚Üî F).

function convertTemp() {
    const userTempInput = parseFloat(document.getElementById("celciumInput").value);
    const farengheit = ((userTempInput * 1.8) + 32);
    const tempResultDiv = document.getElementById("tempResult");

    tempResultDiv.textContent = `–í–∞—à–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É —Ñ–∞—Ä–µ–Ω–≥–µ–π—Ç–∞—Ö ${farengheit}`
}

//93. –ü—Ä–æ—Å—Ç–∞ –≥—Ä–∞ "–ö–∞–º—ñ–Ω—å-–Ω–æ–∂–∏—Ü—ñ-–ø–∞–ø—ñ—Ä".

function play(userChoice) {
      const choices = ["–ö–∞–º—ñ–Ω—å", "–ù–æ–∂–∏—Ü—ñ", "–ü–∞–ø—ñ—Ä"];
      const computerChoice = choices[Math.floor(Math.random() * 3)];

      let result = `–¢–∏: ${userChoice} | –ö–æ–º–ø'—é—Ç–µ—Ä: ${computerChoice} ‚Üí `;

      if (userChoice === computerChoice) {
        result += "–ù—ñ—á–∏—è ü§ù";
      } else if (
        (userChoice === "–ö–∞–º—ñ–Ω—å" && computerChoice === "–ù–æ–∂–∏—Ü—ñ") ||
        (userChoice === "–ù–æ–∂–∏—Ü—ñ" && computerChoice === "–ü–∞–ø—ñ—Ä") ||
        (userChoice === "–ü–∞–ø—ñ—Ä" && computerChoice === "–ö–∞–º—ñ–Ω—å")
      ) {
        result += "–¢–∏ –ø–µ—Ä–µ–º—ñ–≥ üéâ";
      } else {
        result += "–ö–æ–º–ø'—é—Ç–µ—Ä –ø–µ—Ä–µ–º—ñ–≥ üíª";
      }

      document.getElementById("resultGame").textContent = result;
    }

//94. –¢–∞–±–ª–∏—Ü—è –º–Ω–æ–∂–µ–Ω–Ω—è –≤ DOM.

function createMultiplicationTable(size = 10) {
      const table = document.createElement("table");

      // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞
      const headerRow = document.createElement("tr");
      const emptyCell = document.createElement("th");
      headerRow.appendChild(emptyCell);

      for (let i = 1; i <= size; i++) {
        const th = document.createElement("th");
        th.textContent = i;
        headerRow.appendChild(th);
      }
      table.appendChild(headerRow);

      // –†—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
      for (let i = 1; i <= size; i++) {
        const row = document.createElement("tr");

        // –ø–µ—Ä—à–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑ –Ω–æ–º–µ—Ä–æ–º —Ä—è–¥–∫–∞
        const th = document.createElement("th");
        th.textContent = i;
        row.appendChild(th);

        for (let j = 1; j <= size; j++) {
          const td = document.createElement("td");
          td.textContent = i * j;
          row.appendChild(td);
        }

        table.appendChild(row);
      }

      document.getElementById("tableContainer").appendChild(table);
    }

    // —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    createMultiplicationTable(10);

//95. –ö–∞–ª–µ–Ω–¥–∞—Ä (–≤–∏–≤–µ—Å—Ç–∏ –¥–Ω—ñ –º—ñ—Å—è—Ü—è).

function generateCalendar() {
      const month = parseInt(document.getElementById("month").value) - 1; // –º—ñ—Å—è—Ü—ñ –≤ JS –≤—ñ–¥ 0
      const year = parseInt(document.getElementById("year").value);

      const container = document.getElementById("calendarContainer");
      container.innerHTML = ""; // –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è

      const daysOfWeek = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–ù–¥"];

      const calendar = document.createElement("div");
      calendar.className = "calendar";

      // –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
      for (let d of daysOfWeek) {
        const cell = document.createElement("div");
        cell.className = "day day-name";
        cell.textContent = d;
        calendar.appendChild(cell);
      }

      // –ø–µ—Ä—à–∏–π –¥–µ–Ω—å –º—ñ—Å—è—Ü—è
      const firstDay = new Date(year, month, 1);
      const startDay = (firstDay.getDay() + 6) % 7; // –∑—Ä–æ–±–∏–º–æ –ü–Ω = 0

      // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ —É –º—ñ—Å—è—Ü—ñ
      const daysInMonth = new Date(year, month + 1, 0).getDate();

      // –ø—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º
      for (let i = 0; i < startDay; i++) {
        const empty = document.createElement("div");
        empty.className = "day empty";
        calendar.appendChild(empty);
      }

      // –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ –¥–Ω—è–º–∏
      for (let i = 1; i <= daysInMonth; i++) {
        const cell = document.createElement("div");
        cell.className = "day";
        cell.textContent = i;
        calendar.appendChild(cell);
      }

      container.appendChild(calendar);
    }

    // —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–ª–µ–Ω–¥–∞—Ä –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    generateCalendar();

//96. –ü—Ä–æ—Å—Ç–∏–π —Å–ª–∞–π–¥–µ—Ä –∫–∞—Ä—Ç–∏–Ω–æ–∫.

let currentIndex = 0;
    const slides = document.querySelectorAll(".slides img");

    function showSlide(index) {
      slides.forEach((img, i) => {
        img.classList.toggle("active", i === index);
      });
    }

    function nextSlide() {
      currentIndex = (currentIndex + 1) % slides.length;
      showSlide(currentIndex);
    }

    function prevSlide() {
      currentIndex = (currentIndex - 1 + slides.length) % slides.length;
      showSlide(currentIndex);
    }

//97. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è.

 function generatePassword() {
      const length = parseInt(document.getElementById("lengthInput").value);
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
      let password = "";

      for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * chars.length);
        password += chars[randomIndex];
      }

      document.getElementById("result").textContent = "–í–∞—à –ø–∞—Ä–æ–ª—å: " + password;
    }

//98. –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ü–ú–¢ (—ñ–Ω–¥–µ–∫—Å –º–∞—Å–∏ —Ç—ñ–ª–∞).

function calculateBMI() {
      const weight = parseFloat(document.getElementById("weight").value);
      const heightCm = parseFloat(document.getElementById("height").value);

      if (isNaN(weight) || isNaN(heightCm) || weight <= 0 || heightCm <= 0) {
        document.getElementById("result").textContent = "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ!";
        return;
      }

      const heightM = heightCm / 100; // –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ —É –º–µ—Ç—Ä–∏
      const bmi = weight / (heightM * heightM);

      let category = "";
      if (bmi < 18.5) category = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—è –≤–∞–≥–∞";
      else if (bmi < 25) category = "–ù–æ—Ä–º–∞";
      else if (bmi < 30) category = "–ù–∞–¥–º—ñ—Ä–Ω–∞ –≤–∞–≥–∞";
      else category = "–û–∂–∏—Ä—ñ–Ω–Ω—è";

      document.getElementById("result").textContent = 
        `–í–∞—à –Ü–ú–¢: ${bmi.toFixed(2)} (${category})`;
    }

//99. –°–µ–∫—É–Ω–¥–æ–º—ñ—Ä.

// —Å—Ç–∞–Ω —Å–µ–∫—É–Ω–¥–æ–º—ñ—Ä–∞
    let startTime = null;      // —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å—Ç–∞—Ä—Ç—É (ms)
    let elapsed = 0;           // –≤–∂–µ –ø—Ä–æ–π—à–æ–≤—à–∏–π —á–∞—Å —É –º—Å (–ø—Ä–∏ –ø–∞—É–∑—ñ)
    let timerId = null;        // id setInterval
    const display = document.getElementById('display');
    const lapsList = document.getElementById('laps');

    // –∫–Ω–æ–ø–∫–∏
    const startBtn = document.getElementById('startBtn');
    const stopBtn = document.getElementById('stopBtn');
    const lapBtn = document.getElementById('lapBtn');
    const resetBtn = document.getElementById('resetBtn');

    function formatTime(ms) {
      const totalCentis = Math.floor(ms / 10);             // —Å–æ—Ç—ñ —Å–µ–∫—É–Ω–¥–∏
      const centis = totalCentis % 100;
      const totalSeconds = Math.floor(totalCentis / 100);
      const seconds = totalSeconds % 60;
      const minutes = Math.floor(totalSeconds / 60) % 60;
      const pad = (n, l=2) => String(n).padStart(l, '0');
      return `${pad(minutes)}:${pad(seconds)}.${pad(centis)}`;
    }

    function update() {
      const now = Date.now();
      const currentElapsed = elapsed + (startTime ? (now - startTime) : 0);
      display.textContent = formatTime(currentElapsed);
    }

    function start() {
      if (timerId) return; // –≤–∂–µ –ø—Ä–∞—Ü—é—î
      startTime = Date.now();
      timerId = setInterval(update, 10); // –æ–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—ñ 10 ms
      startBtn.disabled = true;
      stopBtn.disabled = false;
      lapBtn.disabled = false;
      resetBtn.disabled = false;
    }

    function stop() {
      if (!timerId) return;
      clearInterval(timerId);
      timerId = null;
      // –Ω–∞–∫–æ–ø–∏—á—É—î–º–æ –ø—Ä–æ–π–¥–µ–Ω–∏–π —á–∞—Å
      elapsed += Date.now() - startTime;
      startTime = null;
      update();
      startBtn.disabled = false;
      stopBtn.disabled = true;
      lapBtn.disabled = true;
    }

    function reset() {
      // –∑—É–ø–∏–Ω—è—î–º–æ, –æ—á–∏—â—É—î–º–æ
      clearInterval(timerId);
      timerId = null;
      startTime = null;
      elapsed = 0;
      display.textContent = '00:00.00';
      lapsList.innerHTML = '';
      startBtn.disabled = false;
      stopBtn.disabled = true;
      lapBtn.disabled = true;
      resetBtn.disabled = true;
    }

    function lap() {
      // —Ñ—ñ–∫—Å—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —É —Å–ø–∏—Å–∫—É –∫—ñ–ª
      const nowElapsed = elapsed + (startTime ? (Date.now() - startTime) : 0);
      const li = document.createElement('li');
      li.textContent = formatTime(nowElapsed);
      // –¥–æ–¥–∞—î–º–æ –∑–≤–µ—Ä—Ö—É (–æ—Å—Ç–∞–Ω–Ω—î –∫–æ–ª–æ –ø–µ—Ä—à–∏–º)
      lapsList.insertBefore(li, lapsList.firstChild);
    }

    // –Ω–∞–≤—ñ—Å–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏
    startBtn.addEventListener('click', start);
    stopBtn.addEventListener('click', stop);
    resetBtn.addEventListener('click', reset);
    lapBtn.addEventListener('click', lap);

    // –¥–æ–¥–∞—Ç–∫–æ–≤–æ: –ø—Ä–æ–±—ñ–ª/Enter –∫–µ—Ä—É—é—Ç—å —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø
    document.addEventListener('keydown', (e) => {
      if (e.code === 'Space') {
        e.preventDefault();
        timerId ? stop() : start();
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (!timerId && elapsed === 0) start();
      }
    });

    // –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    update();

//100. –ú—ñ–Ω—ñ-–≥—Ä–∞ "–ó–º—ñ–π–∫–∞" –∞–±–æ "2048" (–ø—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç).

const SIZE = 4;
    let grid = [];
    let score = 0;

    const boardEl = document.getElementById('board');
    const scoreEl = document.getElementById('score');
    const messageEl = document.getElementById('message');
    const newBtn = document.getElementById('newBtn');

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DOM-–∫–ª—ñ—Ç–∏–Ω–æ–∫
    function initBoardDOM() {
      boardEl.innerHTML = '';
      for (let i = 0; i < SIZE * SIZE; i++) {
        const div = document.createElement('div');
        div.className = 'cell';
        boardEl.appendChild(div);
      }
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ª–æ–≥—ñ—á–Ω—É —Å—ñ—Ç–∫—É
    function initGrid() {
      grid = [];
      for (let r = 0; r < SIZE; r++) {
        grid.push(new Array(SIZE).fill(0));
      }
      score = 0;
      messageEl.textContent = '';
      spawnRandom();
      spawnRandom();
      updateUI();
    }

    // –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —ñ –≤—Å—Ç–∞–≤–∏—Ç–∏ 2 (90%) –∞–±–æ 4 (10%)
    function spawnRandom() {
      const empties = [];
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          if (grid[r][c] === 0) empties.push([r, c]);
        }
      }
      if (empties.length === 0) return false;
      const [r, c] = empties[Math.floor(Math.random() * empties.length)];
      grid[r][c] = Math.random() < 0.9 ? 2 : 4;
      return true;
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ grid
    function updateUI() {
      const cells = boardEl.children;
      let idx = 0;
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          const value = grid[r][c];
          const el = cells[idx++];
          el.textContent = value === 0 ? '' : value;
          // –∫–ª–∞—Å –ø–æ –∑–Ω–∞—á–µ–Ω–Ω—é –¥–ª—è —Å—Ç–∏–ª—ñ–≤
          el.className = 'cell';
          if (value !== 0) {
            const cls = 'tile-' + value;
            // —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª–∞—Å—É ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ generic
            el.classList.add(cls);
          }
        }
      }
      scoreEl.textContent = 'Score: ' + score;
    }

    // Slide & merge –æ–¥–∏–Ω —Ä—è–¥–æ–∫ –≤–ª—ñ–≤–æ. –ü–æ–≤–µ—Ä—Ç–∞—î {newRow, changed, gained}
    function processRow(row) {
      const nonZero = row.filter(x => x !== 0);
      const newRow = [];
      let gained = 0;
      let i = 0;
      while (i < nonZero.length) {
        if (i + 1 < nonZero.length && nonZero[i] === nonZero[i+1]) {
          const merged = nonZero[i] * 2;
          newRow.push(merged);
          gained += merged;
          i += 2; // –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π, –±–æ –æ–±'—î–¥–Ω–∞–ª–∏
        } else {
          newRow.push(nonZero[i]);
          i += 1;
        }
      }
      // –¥–æ–±–∏—Ç–∏ –Ω—É–ª—è–º–∏ –¥–æ –¥–æ–≤–∂–∏–Ω–∏
      while (newRow.length < SIZE) newRow.push(0);
      const changed = newRow.some((v, idx) => v !== row[idx]);
      return { newRow, changed, gained };
    }

    // –†—É—Ö –≤–ª—ñ–≤–æ –ø–æ –≤—Å—ñ–π —Å—ñ—Ç—Ü—ñ
    function moveLeft() {
      let moved = false;
      let gainedTotal = 0;
      for (let r = 0; r < SIZE; r++) {
        const { newRow, changed, gained } = processRow(grid[r]);
        if (changed) {
          grid[r] = newRow;
          moved = true;
          gainedTotal += gained;
        }
      }
      if (gainedTotal > 0) score += gainedTotal;
      return moved;
    }

    // –†—É—Ö –≤–ø—Ä–∞–≤–æ ‚Äî –æ–±–µ—Ä–Ω—É—Ç–∏ –∫–æ–∂–µ–Ω —Ä—è–¥, –≤–∏–∫–æ–Ω–∞—Ç–∏ left, –∑–Ω–æ–≤—É –æ–±–µ—Ä–Ω—É—Ç–∏
    function moveRight() {
      // mirror rows
      for (let r = 0; r < SIZE; r++) grid[r].reverse();
      const moved = moveLeft();
      // restore
      for (let r = 0; r < SIZE; r++) grid[r].reverse();
      return moved;
    }

    // –¢—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞—Ç–∏ –º–∞—Ç—Ä–∏—Ü—é
    function transpose() {
      const t = [];
      for (let r = 0; r < SIZE; r++) t.push(new Array(SIZE).fill(0));
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          t[c][r] = grid[r][c];
        }
      }
      grid = t;
    }

    // –†—É—Ö –≤–≤–µ—Ä—Ö: —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞—Ç–∏ -> left -> —Ç—Ä–∞–Ω—Å–ø–æ–Ω—É–≤–∞—Ç–∏
    function moveUp() {
      transpose();
      const moved = moveLeft();
      transpose();
      return moved;
    }

    // –†—É—Ö –≤–Ω–∏–∑
    function moveDown() {
      transpose();
      const moved = moveRight();
      transpose();
      return moved;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ–º–æ–≥–∏ (–Ω–∞—è–≤–Ω—ñ—Å—Ç—å 2048)
    function checkWin() {
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          if (grid[r][c] === 2048) return true;
        }
      }
      return false;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î —Ö—ñ–¥
    function hasMoves() {
      // —î –ø—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏?
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          if (grid[r][c] === 0) return true;
        }
      }
      // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—É–º—ñ–∂–Ω–∏—Ö –æ–¥–Ω–∞–∫–æ–≤–∏—Ö
      for (let r = 0; r < SIZE; r++) {
        for (let c = 0; c < SIZE; c++) {
          const v = grid[r][c];
          if (r + 1 < SIZE && grid[r+1][c] === v) return true;
          if (c + 1 < SIZE && grid[r][c+1] === v) return true;
        }
      }
      return false;
    }

    // –û–±—Ä–æ–±–∫–∞ —Ö–æ–¥—É (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –æ–¥–Ω—É –∑ —Ñ—É–Ω–∫—Ü—ñ–π —Ä—É—Ö—É)
    function handleMove(direction) {
      if (messageEl.textContent) return; // –ø—ñ—Å–ª—è –∫—ñ–Ω—Ü—è –≥—Ä–∏ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ö–æ–¥–∏
      let moved = false;
      if (direction === 'left') moved = moveLeft();
      else if (direction === 'right') moved = moveRight();
      else if (direction === 'up') moved = moveUp();
      else if (direction === 'down') moved = moveDown();

      if (moved) {
        spawnRandom();
        updateUI();
        if (checkWin()) {
          messageEl.textContent = 'üéâ –í—ñ—Ç–∞—é! –î–æ—Å—è–≥–Ω—É—Ç–æ 2048!';
        } else if (!hasMoves()) {
          messageEl.textContent = 'üí• –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞. –ù–µ–º–∞ —Ö–æ–¥—ñ–≤!';
        }
      }
    }

    // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ –ø–æ–¥—ñ—ó
    document.addEventListener('keydown', (e) => {
      if (messageEl.textContent) return;
      let handled = true;
      switch (e.key) {
        case 'ArrowLeft': handleMove('left'); break;
        case 'ArrowRight': handleMove('right'); break;
        case 'ArrowUp': handleMove('up'); break;
        case 'ArrowDown': handleMove('down'); break;
        default: handled = false;
      }
      if (handled) e.preventDefault();
    });

    // –ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–∞ –≥—Ä–∞
    newBtn.addEventListener('click', () => initGrid());

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DOM + —Å—Ç–∞—Ä—Ç –≥—Ä–∏
    initBoardDOM();
    initGrid();

    // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ—Å—Ç–∏–π –∂–µ—Å—Ç –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö (—Å–≤–∞–π–ø)
    let touchStartX = 0, touchStartY = 0;
    document.addEventListener('touchstart', e => {
      const t = e.touches[0];
      touchStartX = t.clientX; touchStartY = t.clientY;
    }, {passive:true});
    document.addEventListener('touchend', e => {
      const t = e.changedTouches[0];
      const dx = t.clientX - touchStartX;
      const dy = t.clientY - touchStartY;
      if (Math.abs(dx) < 30 && Math.abs(dy) < 30) return;
      if (Math.abs(dx) > Math.abs(dy)) {
        if (dx > 0) handleMove('right'); else handleMove('left');
      } else {
        if (dy > 0) handleMove('down'); else handleMove('up');
      }
    }, {passive:true});






